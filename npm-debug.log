0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@1.4.28
3 info using node@v0.10.35
4 verbose publish [ '.' ]
5 verbose cache add [ '.', null ]
6 verbose cache add name=undefined spec="." args=[".",null]
7 verbose parsed url { protocol: null,
7 verbose parsed url   slashes: null,
7 verbose parsed url   auth: null,
7 verbose parsed url   host: null,
7 verbose parsed url   port: null,
7 verbose parsed url   hostname: null,
7 verbose parsed url   hash: null,
7 verbose parsed url   search: null,
7 verbose parsed url   query: null,
7 verbose parsed url   pathname: '.',
7 verbose parsed url   path: '.',
7 verbose parsed url   href: '.' }
8 silly lockFile 3a52ce78- .
9 verbose lock . /Users/brianpowell/.npm/3a52ce78-.lock
10 verbose tar pack [ '/Users/brianpowell/.npm/strap-sdk-node/1.0.0/package.tgz',
10 verbose tar pack   '.' ]
11 verbose tarball /Users/brianpowell/.npm/strap-sdk-node/1.0.0/package.tgz
12 verbose folder .
13 info prepublish strap-sdk-node@1.0.0
14 silly lockFile 1f1177db-tar tar://.
15 verbose lock tar://. /Users/brianpowell/.npm/1f1177db-tar.lock
16 silly lockFile f0812e52-strap-sdk-node-1-0-0-package-tgz tar:///Users/brianpowell/.npm/strap-sdk-node/1.0.0/package.tgz
17 verbose lock tar:///Users/brianpowell/.npm/strap-sdk-node/1.0.0/package.tgz /Users/brianpowell/.npm/f0812e52-strap-sdk-node-1-0-0-package-tgz.lock
18 silly lockFile 1f1177db-tar tar://.
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile f0812e52-strap-sdk-node-1-0-0-package-tgz tar:///Users/brianpowell/.npm/strap-sdk-node/1.0.0/package.tgz
21 silly lockFile f0812e52-strap-sdk-node-1-0-0-package-tgz tar:///Users/brianpowell/.npm/strap-sdk-node/1.0.0/package.tgz
22 silly lockFile 5f1e0dd5-npm-strap-sdk-node-1-0-0-package /Users/brianpowell/.npm/strap-sdk-node/1.0.0/package
23 verbose lock /Users/brianpowell/.npm/strap-sdk-node/1.0.0/package /Users/brianpowell/.npm/5f1e0dd5-npm-strap-sdk-node-1-0-0-package.lock
24 silly lockFile 5f1e0dd5-npm-strap-sdk-node-1-0-0-package /Users/brianpowell/.npm/strap-sdk-node/1.0.0/package
25 silly lockFile 5f1e0dd5-npm-strap-sdk-node-1-0-0-package /Users/brianpowell/.npm/strap-sdk-node/1.0.0/package
26 silly lockFile 3a52ce78- .
27 silly lockFile 3a52ce78- .
28 silly publish { name: 'strap-sdk-node',
28 silly publish   version: '1.0.0',
28 silly publish   description: 'Easy API service communication with Strap',
28 silly publish   main: 'index.js',
28 silly publish   scripts: { test: 'echo "Error: no test specified" && exit 1' },
28 silly publish   repository: { type: 'git', url: 'git@github.com:strap/strap-sdk.git' },
28 silly publish   author:
28 silly publish    { name: 'Brian Powell',
28 silly publish      email: 'brian@straphq.com',
28 silly publish      url: 'http://straphq.com/' },
28 silly publish   license: 'MIT',
28 silly publish   bugs: { url: 'https://github.com/strap/strap-sdk/issues' },
28 silly publish   homepage: 'https://github.com/strap/strap-sdk',
28 silly publish   dependencies:
28 silly publish    { async: '^0.9.0',
28 silly publish      debug: '^2.1.1',
28 silly publish      lodash: '^3.1.0',
28 silly publish      nconf: '^0.7.1',
28 silly publish      request: '^2.53.0' },
28 silly publish   readme: '# NodeJS > Strap Server-Side SDK\n\nStrap Server-Side SDK provides an easy to use, chainable API for interacting with our\nAPI services.  Its purpose is to abstract away resource information from\nour primary API, i.e. not having to manually track API information for\nyour custom API endpoint.\n\nStrap Server-Side SDK keys off of a global API discovery object using the read token for the API.\nThe Strap Server-Side SDK extracts the need for developers to know, manage, and integrate the API endpoints.\n\nThe a Project API discovery can be found here:\n\nHEADERS: "X-Auth-Token":\nGET [https://api2.straphq.com/discover]([https://api2.straphq.com/discover)\n\n### Installation\n\n```\nnpm install git+ssh://git@github.com:strap/strap-sdk-node.git\n```\n\n### Initialization\n\nOnce you create your strap instance, a call to `strap.discover()` must be made\nbefore interacting with any strap API.  Once complete, strap will emit a\n`ready` event.\n\n```javascript\n// Setup strap SDK, passing in the Read Token for the Project\nvar StrapSDK = require(\'strap-sdk-node\'),\n    strap = new StrapSDK({ token: \'{Read Token for Strap Project}\' });\n\n// Tell Strap to get started\nStrap.discover();\n\n// Listen for ready before interacting with Strap\nStrap.once(\'ready\', function () {\n    // Okay to use strap\n});\n```\n\n### Basic Usage\n\nOnce strap has initialized, all available resources will be exposed directly on\nyour sdk instance.  Each resource will expose a `get` method for fetching data via\nthe API.\n\n```javascript\nstrap.once(\'ready\', function () {\n\n    // Provided parameters are delivered with the request\n    strap.users.get({}, function (err, users) {\n\n    });\n\n    // is equivalent to for requests without URL parameteres\n    strap.users.get(function (err, users) {\n\n    });\n\n    // If the resource has a path parameter, you may pass it short hand\n    // like this\n    strap.activity.get(\'userguid\', function (err, activity) {\n\n    });\n});\n```\n\n### Pagination\n\nSeveral strap APIs are paginated using a "page" parameter.  You have a couple options for dealing with this.\n\nFirst, you can use the resource `all` method to instruct the SDK to handle pagination\nfor you and build a list of all records.  This may be a bad idea for a large dataset.\n\nThe parameters provided to `all` may be omitted.\n\n```javascript\nstrap.once(\'ready\', function () {\n\n    strap.week.all({}, function (err, reports) {\n\n    });\n\n    // is equivalent to\n    strap.week.all(function (err, reports) {\n\n    });\n});\n```\n\nThe second option for handling paginated requests is to create an iterator and\nparse it yourself.  Here, we will use `async.whilst`.\n\n```javascript\nstrap.once(\'ready\', function () {\n\n    // Can provide request parameters here\n    var iter = strap.week.iter();\n\n    async.whilst(function () {\n        // Whether to continue\n        return iter.hasNext();\n    }, function (cb) {\n        // Fetch next batch\n        iter.getNext(function (err, reports) {\n\n            /* handle reports */\n\n            cb();\n        });\n    }, function (err) {\n        // Iter complete\n    });\n});\n```\n\n### API\n\n```javascript\n    // List available endpoints\n    Strap.endpoints();\n    // No Params\n\n    // Optional Param can be passed in as an array\n    // Strap.activity.get( {day: "YYYY-MM-DD", guid: "demo-strap"}, callback )\n    // URL resources can be passed as Strings or in the Array\n    // Strap.activity.get( "demo-strap", callback )\n\n    // Every endpoint has the get() method\n    // Get a record or set of records\n    Strap.activity.get( params, callback ); \n\n    // Fetch a user\'s activity\n    // URL resource: "guid"\n    // Optional: "date", "count", "start", "end"  >> "start" and "end" use "YYYY-MM-DD" format\n    Strap.activity.get("user-guid-value", function (err, data) {\n        /* etc */\n    });\n\n    // Fetch a user\'s behavior profile\n    // URL resource: "guid"\n    // Optional: none\n    Strap.behavior.get("user-guid-value", function (err, data) {\n        /* etc */\n    });\n\n    // Fetch the micro-segmentation job list or a individual micro-segmentation job\n    // URL resource: "id"\n    // Optional: "id", "status"\n    Strap.job.get({params}}, function (err, data) {\n        /* etc */\n    });\n\n    // Create a micro-segmentation job\n    // URL resource: none\n    // Required: "name"\n    // Optional: "description", "guids", "startDate", "endDate", "notificationUrl"  >> "guids" is an array of guid strings\n    Strap.job.post({params}, function (err, data) {\n        /* etc */\n    });\n\n    // Update a micro-segmentation job\n    // URL resource: "id"\n    // Optional: "name", "description"\n    Strap.job.put({params}, function (err, data) {\n        /* etc */\n    });\n\n    // Delete a micro-segmentation job\n    // URL resource: "id"\n    Strap.job.delete("job-id", function (err, data) {\n        /* etc */\n    });\n\n    // Fetch the micro-segmentation job data\n    // URL resource: "id"\n    // Optional: "id"\n    Strap.job_data.get({params}}, function (err, data) {\n        /* etc */\n    });\n\n    // Fetch all user data for month\n    // URL resource: none\n    // Optional: "guid", "page", "per_page"\n    Strap.month.get({}, function (err, data) {\n        /* etc */\n    });\n\n    // Fetch a report\'s data\n    // URL resource: "id"\n    // Optional: none\n    Strap.report.get("id", function (err, data) {\n        /* etc */\n    });\n\n    // Fetch a report\'s food data\n    // URL resource: "id"\n    // Optional: none\n    Strap.food.get({params}, function (err, data) {\n        /* etc */\n    });\n\n    // Fetch a report\'s raw data\n    // URL resource: "id"\n    // Optional: "type"\n    Strap.report_raw.get({params}, function (err, data) {\n        /* etc */\n    });\n\n    // Fetch a report\'s workout data\n    // URL resource: "id"\n    // Optional: none\n    Strap.report_workout.get({params}, function (err, data) {\n        /* etc */\n    });\n\n    // Fetch the segmentation for the projet\n    // URL resource: none\n    // Optional: "date", "period"\n    Strap.segmentation.get({}, function (err, data) {\n        /* etc */\n    });\n\n    // Fetch all user data for today\n    // URL resource: none\n    // Optional: "guid", "page", "per_page"\n    Strap.today.get({}, function (err, data) {\n        /* etc */\n    });\n\n    // Fetch a user\'s trend data\n    // URL resource: none\n    // Optional: "guid"\n    Strap.trend.get({}, function (err, data) {\n        /* etc */\n    });\n\n    // List project triggers or specific trigger\n    // URL resource: none\n    // Required: none\n    // Optional: "id", "key", "type", "actionType"\n    Strap.trigger.get({params}, function (err, data) {\n        /* etc */\n    });\n\n    // Create a trigger\n    // URL resource: none\n    // Required: "active", "name", "type", "range", "conditions"\n    // Optional: "actionType", "actionUrl"\n    Strap.trigger.post({params}, function (err, data) {\n        /* etc */\n    });\n\n    // Update a trigger\n    // URL resource: "id"\n    // Optional: "active", "name", "type", "range", "conditions", "actionType", "actionUrl"\n    Strap.trigger.put({params}, function (err, data) {\n        /* etc */\n    });\n\n    // Delete a trigger\n    // URL resource: "id"\n    Strap.trigger.delete("trigger-id", function (err, data) {\n        /* etc */\n    });\n\n    // Fetch trigger data\n    // URL resource: "id"\n    // Optional: "count"\n    Strap.trigger_data.get({id: "trigger-id"}, function (err, data) {\n        /* etc */\n    });\n\n    // Fetch a simple user object\n    // URL resource: "guid"\n    // Optional: none\n    Strap.user.get({}, function (err, data) {\n        /* etc */\n    });\n\n    // Fetch a user list for the Project\n    // URL resource: none\n    // Optional: "platform", "count"\n    Strap.users.get({}, function (err, data) {\n        /* etc */\n    });\n\n    // Fetch all user data for week\n    // URL resource: none\n    // Optional: "guid", "page", "per_page"\n    Strap.week.get({}, function (err, data) {\n        /* etc */\n    });\n});\n```\n\n### REPL\n\n`Strap` also ships with a repl should you be interested in playing around with it.  And example screen shot is included:\n\n![](https://s3.amazonaws.com/f.cl.ly/items/3C2w2J0g093D0i3S3Z20/Image%202015-03-11%20at%2011.45.16%20AM.png)\n',
28 silly publish   readmeFilename: 'README.md',
28 silly publish   gitHead: '255a151d70112dfe9c211799adbb448abefdb9af',
28 silly publish   _id: 'strap-sdk-node@1.0.0',
28 silly publish   _shasum: '8c8d0d4d5749d5ac303060c0d446e40787324b2c',
28 silly publish   _from: '.' }
29 error need auth auth and email required for publishing
29 error need auth You need to authorize this machine using `npm adduser`
30 error System Darwin 14.4.0
31 error command "node" "/usr/local/bin/npm" "publish"
32 error cwd /Users/brianpowell/mysrc/sdk/strap-sdk-node
33 error node -v v0.10.35
34 error npm -v 1.4.28
35 error code ENEEDAUTH
36 verbose exit [ 1, true ]
